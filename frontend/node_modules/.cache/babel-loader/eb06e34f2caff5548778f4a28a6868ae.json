{"ast":null,"code":"var _jsxFileName = \"/Users/alexandergalev/Desktop/MERN_Project/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer } from 'react';\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst InputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default function Input(props) {\n  const [inputState, dispatch] = useReducer(InputReducer, {\n    value: '',\n    isTouched: false,\n    isValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 55\n    }\n  }, props.errorText));\n}","map":{"version":3,"sources":["/Users/alexandergalev/Desktop/MERN_Project/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","validate","InputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","changeHandler","event","target","touchHandler","element","id","placeholder","rows","label","errorText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAFT;AAGLC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACK,UAApB;AAHZ,OAAP;;AAKA,SAAK,OAAL;AAAc;AACZ,eAAO,EAAC,GAAGN,KAAJ;AACPO,UAAAA,SAAS,EAAE;AADJ,SAAP;AAED;;AACH;AACE,aAAOP,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAe,SAASQ,KAAT,CAAeC,KAAf,EAAsB;AACnC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBd,UAAU,CAACE,YAAD,EAAe;AACtDI,IAAAA,KAAK,EAAE,EAD+C;AAEtDI,IAAAA,SAAS,EAAE,KAF2C;AAGtDF,IAAAA,OAAO,EAAE;AAH6C,GAAf,CAAzC;;AAKA,QAAMO,aAAa,GAAIC,KAAD,IAAW;AAC/BF,IAAAA,QAAQ,CAAC;AAAET,MAAAA,IAAI,EAAE,QAAR;AAAkBE,MAAAA,GAAG,EAAES,KAAK,CAACC,MAAN,CAAaX,KAApC;AAA2CG,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAA7D,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMS,YAAY,GAAG,MAAM;AACzBJ,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJD;;AAMA,QAAMc,OAAO,GACXP,KAAK,CAACO,OAAN,KAAkB,OAAlB,gBACE;AACE,IAAA,EAAE,EAAEP,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACP,IAFd;AAGE,IAAA,WAAW,EAAEO,KAAK,CAACS,WAHrB;AAIE,IAAA,QAAQ,EAAEN,aAJZ;AAKE,IAAA,MAAM,EAAEG,YALV;AAME,IAAA,KAAK,EAAEL,UAAU,CAACP,KANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,gBAUE;AACE,IAAA,EAAE,EAAEM,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACU,IAAN,IAAc,CAFtB;AAGE,IAAA,QAAQ,EAAEP,aAHZ;AAIE,IAAA,MAAM,EAAEG,YAJV;AAKE,IAAA,KAAK,EAAEL,UAAU,CAACP,KALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ;AAoBA,sBACE;AACE,IAAA,SAAS,EAAG,gBACV,CAACO,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,IAA+C,uBAChD,EAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAO,IAAA,OAAO,EAAEE,KAAK,CAACQ,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BR,KAAK,CAACW,KAAjC,CAJF,EAKGJ,OALH,EAMG,CAACN,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,iBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,KAAK,CAACY,SAAV,CANlD,CADF;AAUD","sourcesContent":["import React, { useReducer } from 'react'\n\nimport { validate } from '../../util/validators'\nimport './Input.css'\n\nconst InputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      }\n      case 'TOUCH': {\n        return {...state,\n        isTouched: true}\n      }\n    default:\n      return state\n  }\n}\n\nexport default function Input(props) {\n  const [inputState, dispatch] = useReducer(InputReducer, {\n    value: '',\n    isTouched: false,\n    isValid: false,\n  })\n  const changeHandler = (event) => {\n    dispatch({ type: 'CHANGE', val: event.target.value, validators: props.validators })\n  }\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    })\n  }\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    )\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && 'form-control--invalid'\n      }`}>\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}